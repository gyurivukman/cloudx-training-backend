{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "GetProductListLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/product-service-dev-getProductList"
      }
    },
    "GetProductsByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/product-service-dev-getProductsById"
      }
    },
    "CreateProductLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/product-service-dev-createProduct"
      }
    },
    "CatalogBatchProcessLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/product-service-dev-catalogBatchProcess"
      }
    },
    "GetProductListLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/product-service/dev/1698599271748-2023-10-29T17:07:51.748Z/product-service.zip"
        },
        "Handler": "handler.getProductList",
        "Runtime": "nodejs18.x",
        "FunctionName": "product-service-dev-getProductList",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "Lambda function to retrieve a product list.",
        "Environment": {
          "Variables": {
            "PRODUCTS_TABLE": "products",
            "STOCKS_TABLE": "stocks"
          }
        },
        "Role": "arn:aws:iam::135024919331:role/everything-lambda-role"
      },
      "DependsOn": [
        "GetProductListLogGroup"
      ]
    },
    "GetProductsByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/product-service/dev/1698599271748-2023-10-29T17:07:51.748Z/product-service.zip"
        },
        "Handler": "handler.getProductsById",
        "Runtime": "nodejs18.x",
        "FunctionName": "product-service-dev-getProductsById",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "Retrieves a single product based on an id parameter.",
        "Environment": {
          "Variables": {
            "PRODUCTS_TABLE": "products",
            "STOCKS_TABLE": "stocks"
          }
        },
        "Role": "arn:aws:iam::135024919331:role/everything-lambda-role"
      },
      "DependsOn": [
        "GetProductsByIdLogGroup"
      ]
    },
    "CreateProductLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/product-service/dev/1698599271748-2023-10-29T17:07:51.748Z/product-service.zip"
        },
        "Handler": "handler.createProduct",
        "Runtime": "nodejs18.x",
        "FunctionName": "product-service-dev-createProduct",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "Creates a product based on the body.",
        "Environment": {
          "Variables": {
            "PRODUCTS_TABLE": "products",
            "STOCKS_TABLE": "stocks"
          }
        },
        "Role": "arn:aws:iam::135024919331:role/everything-lambda-role"
      },
      "DependsOn": [
        "CreateProductLogGroup"
      ]
    },
    "CatalogBatchProcessLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/product-service/dev/1698599271748-2023-10-29T17:07:51.748Z/product-service.zip"
        },
        "Handler": "handler.catalogBatchProcess",
        "Runtime": "nodejs18.x",
        "FunctionName": "product-service-dev-catalogBatchProcess",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "Pushes products from the catalogItemsQueue into the DB.",
        "Environment": {
          "Variables": {
            "PRODUCTS_TABLE": "products",
            "STOCKS_TABLE": "stocks"
          }
        },
        "Role": "arn:aws:iam::135024919331:role/everything-lambda-role"
      },
      "DependsOn": [
        "CatalogBatchProcessLogGroup"
      ]
    },
    "GetProductListLambdaVersionbBlwDvv7cSUbUI6Zm4bA22FAzkhZGAbbALqbUTE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetProductListLambdaFunction"
        },
        "CodeSha256": "R7l+atuCBXcBwbzzHjBsYCFZqFKqjyvbG6gKiwtWLrY=",
        "Description": "Lambda function to retrieve a product list."
      }
    },
    "GetProductListLambdaFunctionUrl": {
      "Type": "AWS::Lambda::Url",
      "Properties": {
        "AuthType": "NONE",
        "TargetFunctionArn": {
          "Fn::GetAtt": [
            "GetProductListLambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "GetProductListLambdaPermissionFnUrl": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetProductListLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunctionUrl",
        "Principal": "*",
        "FunctionUrlAuthType": "NONE"
      }
    },
    "GetProductsByIdLambdaVersionkoHk1DctwOXNZYsHEQIWftR2fAMESeIIBd9xewcruA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetProductsByIdLambdaFunction"
        },
        "CodeSha256": "R7l+atuCBXcBwbzzHjBsYCFZqFKqjyvbG6gKiwtWLrY=",
        "Description": "Retrieves a single product based on an id parameter."
      }
    },
    "GetProductsByIdLambdaFunctionUrl": {
      "Type": "AWS::Lambda::Url",
      "Properties": {
        "AuthType": "NONE",
        "TargetFunctionArn": {
          "Fn::GetAtt": [
            "GetProductsByIdLambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "GetProductsByIdLambdaPermissionFnUrl": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetProductsByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunctionUrl",
        "Principal": "*",
        "FunctionUrlAuthType": "NONE"
      }
    },
    "CreateProductLambdaVersion0Dg1qHSC4LWAs0UclJIiXhIE79rTmGsx6oebT0Ofc5c": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateProductLambdaFunction"
        },
        "CodeSha256": "R7l+atuCBXcBwbzzHjBsYCFZqFKqjyvbG6gKiwtWLrY=",
        "Description": "Creates a product based on the body."
      }
    },
    "CreateProductLambdaFunctionUrl": {
      "Type": "AWS::Lambda::Url",
      "Properties": {
        "AuthType": "NONE",
        "TargetFunctionArn": {
          "Fn::GetAtt": [
            "CreateProductLambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "CreateProductLambdaPermissionFnUrl": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateProductLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunctionUrl",
        "Principal": "*",
        "FunctionUrlAuthType": "NONE"
      }
    },
    "CatalogBatchProcessLambdaVersionb6l9iSXqnzpOA3wvYyiIFyAj0hMW4aagbXtUqhmTpmo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CatalogBatchProcessLambdaFunction"
        },
        "CodeSha256": "R7l+atuCBXcBwbzzHjBsYCFZqFKqjyvbG6gKiwtWLrY=",
        "Description": "Pushes products from the catalogItemsQueue into the DB."
      }
    },
    "CatalogBatchProcessEventSourceMappingSQSCatalogItemsQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [],
      "Properties": {
        "BatchSize": 5,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "catalogItemsQueue",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "CatalogBatchProcessLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true,
        "FunctionResponseTypes": [
          "ReportBatchItemFailures"
        ]
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-product-service",
        "ProtocolType": "HTTP",
        "CorsConfiguration": {
          "AllowHeaders": [
            "Content-Type",
            "X-Amz-Date",
            "Authorization",
            "X-Api-Key",
            "X-Amz-Security-Token",
            "X-Amz-User-Agent",
            "X-Amzn-Trace-Id"
          ],
          "AllowMethods": [
            "OPTIONS",
            "GET",
            "POST"
          ],
          "AllowOrigins": [
            "*"
          ]
        }
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "GetProductListLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetProductListLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetProductList": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetProductListLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetProducts": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /products",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetProductList"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetProductList"
    },
    "GetProductsByIdLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetProductsByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetProductsById": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetProductsByIdLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetProductsProductidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /products/{productId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetProductsById"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetProductsById"
    },
    "CreateProductLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateProductLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateProduct": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateProductLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostProducts": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /products",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateProduct"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationCreateProduct"
    },
    "catalogItemsQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "MessageRetentionPeriod": 300,
        "VisibilityTimeout": 10
      }
    },
    "creteProductTopic": {
      "Type": "AWS::SNS::Topic"
    },
    "createProductSNSSub": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Endpoint": "sereneplatypus@gmail.com",
        "Protocol": "email",
        "TopicArn": {
          "Ref": "creteProductTopic"
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-product-service-dev-ServerlessDeploymentBucketName"
      }
    },
    "GetProductListLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetProductListLambdaVersionbBlwDvv7cSUbUI6Zm4bA22FAzkhZGAbbALqbUTE"
      },
      "Export": {
        "Name": "sls-product-service-dev-GetProductListLambdaFunctionQualifiedArn"
      }
    },
    "GetProductListLambdaFunctionUrl": {
      "Description": "Lambda Function URL",
      "Value": {
        "Fn::GetAtt": [
          "GetProductListLambdaFunctionUrl",
          "FunctionUrl"
        ]
      },
      "Export": {
        "Name": "sls-product-service-dev-GetProductListLambdaFunctionUrl"
      }
    },
    "GetProductsByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetProductsByIdLambdaVersionkoHk1DctwOXNZYsHEQIWftR2fAMESeIIBd9xewcruA"
      },
      "Export": {
        "Name": "sls-product-service-dev-GetProductsByIdLambdaFunctionQualifiedArn"
      }
    },
    "GetProductsByIdLambdaFunctionUrl": {
      "Description": "Lambda Function URL",
      "Value": {
        "Fn::GetAtt": [
          "GetProductsByIdLambdaFunctionUrl",
          "FunctionUrl"
        ]
      },
      "Export": {
        "Name": "sls-product-service-dev-GetProductsByIdLambdaFunctionUrl"
      }
    },
    "CreateProductLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateProductLambdaVersion0Dg1qHSC4LWAs0UclJIiXhIE79rTmGsx6oebT0Ofc5c"
      },
      "Export": {
        "Name": "sls-product-service-dev-CreateProductLambdaFunctionQualifiedArn"
      }
    },
    "CreateProductLambdaFunctionUrl": {
      "Description": "Lambda Function URL",
      "Value": {
        "Fn::GetAtt": [
          "CreateProductLambdaFunctionUrl",
          "FunctionUrl"
        ]
      },
      "Export": {
        "Name": "sls-product-service-dev-CreateProductLambdaFunctionUrl"
      }
    },
    "CatalogBatchProcessLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CatalogBatchProcessLambdaVersionb6l9iSXqnzpOA3wvYyiIFyAj0hMW4aagbXtUqhmTpmo"
      },
      "Export": {
        "Name": "sls-product-service-dev-CatalogBatchProcessLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-product-service-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-product-service-dev-HttpApiUrl"
      }
    }
  }
}